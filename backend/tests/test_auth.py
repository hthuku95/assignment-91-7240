content='import pytest\nfrom django.test import TestCase\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom unittest.mock import patch, MagicMock\nfrom django.core.cache import cache\nfrom django.conf import settings\nimport json\nimport time\nfrom datetime import datetime, timedelta\nfrom django.utils import timezone\n\nUser = get_user_model()\n\n\nclass UserRegistrationTestCase(APITestCase):\n    """Test user registration functionality"""\n    \n    def setUp(self):\n        self.client = APIClient()\n        self.registration_url = reverse(\'auth:register\')\n        self.valid_user_data = {\n            \'username\': \'testuser\',\n            \'email\': \'test@example.com\',\n            \'password\': \'SecurePass123!\',\n            \'password_confirm\': \'SecurePass123!\',\n            \'first_name\': \'Test\',\n            \'last_name\': \'User\'\n        }\n    \n    def test_valid_user_registration(self):\n        """Test successful user registration"""\n        response = self.client.post(\n            self.registration_url,\n            self.valid_user_data,\n            format=\'json\'\n        )\n        \n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertIn(\'access_token\', response.data)\n        self.assertIn(\'refresh_token\', response.data)\n        self.assertIn(\'user\', response.data)\n        \n        # Verify user was created\n        user = User.objects.get(username=\'testuser\')\n        self.assertEqual(user.email, \'test@example.com\')\n        self.assertTrue(user.check_password(\'SecurePass123!\'))\n    \n    def test_duplicate_username_registration(self):\n        """Test registration with existing username"""\n        User.objects.create_user(\n            username=\'testuser\',\n            email=\'existing@example.com\',\n            password=\'password123\'\n        )\n        \n        response = self.client.post(\n            self.registration_url,\n            self.valid_user_data,\n            format=\'json\'\n        )\n        \n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\'username\', response.data)\n    \n    def test_duplicate_email_registration(self):\n        """Test registration with existing email"""\n        User.objects.create_user(\n            username=\'existinguser\',\n            email=\'test@example.com\',\n            password=\'password123\'\n        )\n        \n        response = self.client.post(\n            self.registration_url,\n            self.valid_user_data,\n            format=\'json\'\n        )\n        \n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\'email\', response.data)\n    \n    def test_password_mismatch_registration(self):\n        """Test registration with mismatched passwords"""\n        invalid_data = self.valid_user_data.copy()\n        invalid_data[\'password_confirm\'] = \'DifferentPassword123!\'\n        \n        response = self.client.post(\n            self.registration_url,\n            invalid_data,\n            format=\'json\'\n        )\n        \n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\'password_confirm\', response.data)\n    \n    def test_weak_password_registration(self):\n        """Test registration with weak password"""\n        invalid_data = self.valid_user_data.copy()\n        invalid_data[\'password\'] = \'123\'\n        invalid_data[\'password_confirm\'] = \'123\'\n        \n        response = self.client.post(\n            self.registration_url,\n            invalid_data,\n            format=\'json\'\n        )\n        \n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn(\'password\', response.data)\n    \n    def test_invalid_email_registration(self):\n        """' additional_kwargs={} response_metadata={'id': 'msg_01Why5ZogbxwFx2h2BMVYEVB', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--593d5313-14e5-46e9-866c-521c54ee88e4-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}