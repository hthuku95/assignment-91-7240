content='import pytest\nfrom decimal import Decimal\nfrom unittest.mock import patch, Mock\nfrom django.test import TestCase\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom django.utils import timezone\nfrom datetime import timedelta\n\nfrom orders.models import Order, OrderItem\nfrom products.models import Product, Category\nfrom payments.models import Payment\nfrom orders.serializers import OrderSerializer, OrderItemSerializer\nfrom orders.services import OrderService, PaymentService\n\nUser = get_user_model()\n\n\nclass OrderModelTest(TestCase):\n    """Test cases for Order model functionality."""\n    \n    def setUp(self):\n        """Set up test data for order model tests."""\n        self.user = User.objects.create_user(\n            username=\'testuser\',\n            email=\'test@example.com\',\n            password=\'testpass123\'\n        )\n        \n        self.category = Category.objects.create(\n            name=\'Electronics\',\n            description=\'Electronic products\'\n        )\n        \n        self.product = Product.objects.create(\n            name=\'Test Product\',\n            description=\'A test product\',\n            price=Decimal(\'99.99\'),\n            category=self.category,\n            stock_quantity=10\n        )\n        \n        self.order = Order.objects.create(\n            user=self.user,\n            status=\'pending\',\n            total_amount=Decimal(\'199.98\'),\n            shipping_address=\'123 Test St, Test City, TC 12345\'\n        )\n        \n        self.order_item = OrderItem.objects.create(\n            order=self.order,\n            product=self.product,\n            quantity=2,\n            price=self.product.price\n        )\n\n    def test_order_creation(self):\n        """Test order model creation and basic properties."""\n        self.assertEqual(self.order.user, self.user)\n        self.assertEqual(self.order.status, \'pending\')\n        self.assertEqual(self.order.total_amount, Decimal(\'199.98\'))\n        self.assertIsNotNone(self.order.created_at)\n        self.assertTrue(self.order.order_number.startswith(\'ORD-\'))\n\n    def test_order_string_representation(self):\n        """Test order model string representation."""\n        expected = f"Order {self.order.order_number} - {self.user.username}"\n        self.assertEqual(str(self.order), expected)\n\n    def test_order_item_creation(self):\n        """Test order item creation and relationships."""\n        self.assertEqual(self.order_item.order, self.order)\n        self.assertEqual(self.order_item.product, self.product)\n        self.assertEqual(self.order_item.quantity, 2)\n        self.assertEqual(self.order_item.price, self.product.price)\n\n    def test_order_item_subtotal(self):\n        """Test order item subtotal calculation."""\n        expected_subtotal = self.order_item.quantity * self.order_item.price\n        self.assertEqual(self.order_item.subtotal, expected_subtotal)\n\n    def test_order_total_calculation(self):\n        """Test order total amount calculation."""\n        # Add another order item\n        OrderItem.objects.create(\n            order=self.order,\n            product=self.product,\n            quantity=1,\n            price=Decimal(\'50.00\')\n        )\n        \n        # Recalculate total\n        self.order.calculate_total()\n        expected_total = Decimal(\'249.98\')  # (2 * 99.99) + (1 * 50.00)\n        self.assertEqual(self.order.total_amount, expected_total)\n\n    def test_order_status_transitions(self):\n        """Test valid order status transitions."""\n        # Test pending to confirmed\n        self.order.update_status(\'confirmed\')\n        self.assertEqual(self.order.status, \'confirmed\')\n        \n        # Test confirmed to shipped\n        self.order.update_status(\'shipped\')\n        self.assertEqual(self.order.status, \'shipped\')\n        \n        # Test shipped to delivered\n        self.order.update_status(\'delivered\')\n        ' additional_kwargs={} response_metadata={'id': 'msg_01SE72h5o1yVTq8nS7rX2vxh', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--e38f9947-eabd-4e10-8fd9-a1742783ac2b-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}