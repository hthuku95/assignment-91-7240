content='import pytest\nimport json\nfrom decimal import Decimal\nfrom django.test import TestCase\nfrom django.urls import reverse\nfrom django.contrib.auth import get_user_model\nfrom rest_framework.test import APITestCase, APIClient\nfrom rest_framework import status\nfrom rest_framework.authtoken.models import Token\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom PIL import Image\nfrom io import BytesIO\nfrom unittest.mock import patch, MagicMock\n\nfrom products.models import Product, Category, ProductImage, ProductReview\nfrom products.serializers import ProductSerializer, CategorySerializer\n\nUser = get_user_model()\n\n\nclass ProductAPITestCase(APITestCase):\n    """Comprehensive test suite for Product API endpoints"""\n    \n    def setUp(self):\n        """Set up test data and authentication"""\n        self.client = APIClient()\n        \n        # Create test users\n        self.admin_user = User.objects.create_user(\n            email=\'admin@test.com\',\n            password=\'testpass123\',\n            is_staff=True,\n            is_superuser=True\n        )\n        self.regular_user = User.objects.create_user(\n            email=\'user@test.com\',\n            password=\'testpass123\'\n        )\n        self.vendor_user = User.objects.create_user(\n            email=\'vendor@test.com\',\n            password=\'testpass123\',\n            is_vendor=True\n        )\n        \n        # Create authentication tokens\n        self.admin_token = Token.objects.create(user=self.admin_user)\n        self.user_token = Token.objects.create(user=self.regular_user)\n        self.vendor_token = Token.objects.create(user=self.vendor_user)\n        \n        # Create test categories\n        self.category1 = Category.objects.create(\n            name=\'Electronics\',\n            slug=\'electronics\',\n            description=\'Electronic devices and gadgets\'\n        )\n        self.category2 = Category.objects.create(\n            name=\'Clothing\',\n            slug=\'clothing\',\n            description=\'Fashion and apparel\'\n        )\n        \n        # Create test products\n        self.product1 = Product.objects.create(\n            name=\'iPhone 14\',\n            slug=\'iphone-14\',\n            description=\'Latest Apple smartphone\',\n            price=Decimal(\'999.99\'),\n            stock_quantity=50,\n            category=self.category1,\n            vendor=self.vendor_user,\n            is_active=True\n        )\n        self.product2 = Product.objects.create(\n            name=\'Samsung Galaxy S23\',\n            slug=\'samsung-galaxy-s23\',\n            description=\'Premium Android smartphone\',\n            price=Decimal(\'899.99\'),\n            stock_quantity=30,\n            category=self.category1,\n            vendor=self.vendor_user,\n            is_active=True\n        )\n        self.inactive_product = Product.objects.create(\n            name=\'Inactive Product\',\n            slug=\'inactive-product\',\n            description=\'This product is inactive\',\n            price=Decimal(\'199.99\'),\n            stock_quantity=0,\n            category=self.category2,\n            vendor=self.vendor_user,\n            is_active=False\n        )\n        \n        # Create test product images\n        self.create_test_image()\n        \n        # API endpoints\n        self.products_url = reverse(\'product-list\')\n        self.product_detail_url = lambda pk: reverse(\'product-detail\', kwargs={\'pk\': pk})\n        self.categories_url = reverse(\'category-list\')\n    \n    def create_test_image(self):\n        """Create a test image file for product images"""\n        image = Image.new(\'RGB\', (100, 100), color=\'red\')\n        image_file = BytesIO()\n        image.save(image_file, \'JPEG\')\n        image_file.seek(0)\n        \n        self.test_image = SimpleUploadedFile(\n            name=\'test_image.jpg\',\n            content=image_file.read(),\n            content_type=\'image/jpeg\'\n        )\n        \n        # Create product image\n        ProductImage.objects.create(\n            product=self.product1,\n            image=self.test_image,\n            alt_' additional_kwargs={} response_metadata={'id': 'msg_01QxdvFp9tKF5yyjzfv643Ld', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--287495b1-5801-429a-bb70-9b7faa24b6da-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}