content='from django.shortcuts import get_object_or_404\nfrom django.db.models import Q, Avg\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nfrom django.core.cache import cache\nfrom django.db import transaction\nfrom rest_framework import generics, status, filters\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly\nfrom rest_framework.pagination import PageNumberPagination\nfrom rest_framework.views import APIView\nfrom django_filters.rest_framework import DjangoFilterBackend\nimport logging\n\nfrom .models import Product, Category, Review\nfrom .serializers import (\n    ProductSerializer, \n    ProductDetailSerializer, \n    CategorySerializer,\n    ReviewSerializer,\n    ProductCreateSerializer\n)\nfrom .filters import ProductFilter\nfrom .permissions import IsOwnerOrReadOnly, IsAdminOrReadOnly\n\nlogger = logging.getLogger(__name__)\n\n\nclass ProductPagination(PageNumberPagination):\n    """Custom pagination for products"""\n    page_size = 20\n    page_size_query_param = \'page_size\'\n    max_page_size = 100\n\n\nclass ProductListCreateView(generics.ListCreateAPIView):\n    """\n    List all products or create a new product.\n    GET: Public access for listing products\n    POST: Admin only for creating products\n    """\n    queryset = Product.objects.filter(is_active=True).select_related(\'category\')\n    serializer_class = ProductSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    pagination_class = ProductPagination\n    filter_backends = [DjangoFilterBackend, filters.SearchBackend, filters.OrderingFilter]\n    filterset_class = ProductFilter\n    search_fields = [\'name\', \'description\', \'category__name\']\n    ordering_fields = [\'price\', \'created_at\', \'rating\', \'name\']\n    ordering = [\'-created_at\']\n\n    def get_serializer_class(self):\n        if self.request.method == \'POST\':\n            return ProductCreateSerializer\n        return ProductSerializer\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        \n        # Add rating annotation\n        queryset = queryset.annotate(\n            rating=Avg(\'reviews__rating\')\n        )\n        \n        # Category filtering\n        category_id = self.request.query_params.get(\'category\')\n        if category_id:\n            queryset = queryset.filter(category_id=category_id)\n        \n        # Price range filtering\n        min_price = self.request.query_params.get(\'min_price\')\n        max_price = self.request.query_params.get(\'max_price\')\n        \n        if min_price:\n            try:\n                queryset = queryset.filter(price__gte=float(min_price))\n            except ValueError:\n                pass\n                \n        if max_price:\n            try:\n                queryset = queryset.filter(price__lte=float(max_price))\n            except ValueError:\n                pass\n        \n        # In stock filtering\n        in_stock = self.request.query_params.get(\'in_stock\')\n        if in_stock and in_stock.lower() == \'true\':\n            queryset = queryset.filter(stock_quantity__gt=0)\n        \n        return queryset\n\n    def perform_create(self, serializer):\n        """Only allow admin users to create products"""\n        if not self.request.user.is_staff:\n            raise PermissionError("Only admin users can create products")\n        \n        try:\n            with transaction.atomic():\n                product = serializer.save()\n                logger.info(f"Product created: {product.name} by user {self.request.user.id}")\n        except Exception as e:\n            logger.error(f"Error creating product: {str(e)}")\n            raise\n\n    @method_decorator(cache_page(60 * 15))  # Cache for 15 minutes\n    def list(self, request, *args, **kwargs):\n        return super().list(request, *args, **kwargs)\n' additional_kwargs={} response_metadata={'id': 'msg_01RjzrfrXDotYidWN6QekknS', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--988cb894-6abb-42cb-a49f-e127681c955b-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}