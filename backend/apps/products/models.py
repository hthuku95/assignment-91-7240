content='from django.db import models\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.contrib.auth import get_user_model\nfrom django.utils import timezone\nfrom decimal import Decimal\nimport uuid\n\nUser = get_user_model()\n\n\nclass Category(models.Model):\n    """Product category model"""\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    parent = models.ForeignKey(\n        \'self\', \n        on_delete=models.CASCADE, \n        null=True, \n        blank=True, \n        related_name=\'subcategories\'\n    )\n    image = models.ImageField(upload_to=\'categories/\', blank=True, null=True)\n    is_active = models.BooleanField(default=True)\n    sort_order = models.PositiveIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        verbose_name = \'Category\'\n        verbose_name_plural = \'Categories\'\n        ordering = [\'sort_order\', \'name\']\n\n    def __str__(self):\n        return self.name\n\n    @property\n    def full_name(self):\n        """Return full category path"""\n        if self.parent:\n            return f"{self.parent.full_name} > {self.name}"\n        return self.name\n\n    def get_children(self):\n        """Get all direct child categories"""\n        return self.subcategories.filter(is_active=True)\n\n    def get_all_children(self):\n        """Get all descendant categories"""\n        children = list(self.subcategories.filter(is_active=True))\n        for child in children:\n            children.extend(child.get_all_children())\n        return children\n\n\nclass Brand(models.Model):\n    """Product brand model"""\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    logo = models.ImageField(upload_to=\'brands/\', blank=True, null=True)\n    website = models.URLField(blank=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        ordering = [\'name\']\n\n    def __str__(self):\n        return self.name\n\n\nclass Product(models.Model):\n    """Main product model"""\n    STATUS_CHOICES = [\n        (\'draft\', \'Draft\'),\n        (\'active\', \'Active\'),\n        (\'inactive\', \'Inactive\'),\n        (\'discontinued\', \'Discontinued\'),\n    ]\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    slug = models.SlugField(max_length=255, unique=True)\n    description = models.TextField()\n    short_description = models.TextField(max_length=500, blank=True)\n    sku = models.CharField(max_length=100, unique=True)\n    category = models.ForeignKey(\n        Category, \n        on_delete=models.PROTECT, \n        related_name=\'products\'\n    )\n    brand = models.ForeignKey(\n        Brand, \n        on_delete=models.SET_NULL, \n        null=True, \n        blank=True,\n        related_name=\'products\'\n    )\n    price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2,\n        validators=[MinValueValidator(Decimal(\'' additional_kwargs={} response_metadata={'id': 'msg_016LFiZDiiPQHW1SzjW76Y85', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--4379b198-d53d-4e52-88ef-962efb52409d-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}