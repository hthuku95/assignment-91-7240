content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom .models import Product, Category, ProductImage, ProductVariant, Review, ProductAttribute, AttributeValue\nfrom ..orders.models import OrderItem\n\nUser = get_user_model()\n\n\nclass CategorySerializer(serializers.ModelSerializer):\n    """Serializer for product categories with nested subcategories"""\n    \n    children = serializers.SerializerMethodField()\n    product_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Category\n        fields = [\'id\', \'name\', \'slug\', \'description\', \'image\', \'parent\', \n                 \'children\', \'product_count\', \'is_active\', \'created_at\']\n        read_only_fields = [\'slug\', \'created_at\']\n    \n    def get_children(self, obj):\n        """Get nested subcategories"""\n        if obj.children.exists():\n            return CategorySerializer(obj.children.filter(is_active=True), many=True).data\n        return []\n    \n    def get_product_count(self, obj):\n        """Get count of active products in this category"""\n        return obj.products.filter(is_active=True).count()\n\n\nclass ProductImageSerializer(serializers.ModelSerializer):\n    """Serializer for product images"""\n    \n    class Meta:\n        model = ProductImage\n        fields = [\'id\', \'image\', \'alt_text\', \'is_primary\', \'order\']\n        \n    def validate_image(self, value):\n        """Validate image file size and format"""\n        if value.size > 5 * 1024 * 1024:  # 5MB limit\n            raise serializers.ValidationError("Image file size cannot exceed 5MB")\n        \n        allowed_formats = [\'JPEG\', \'JPG\', \'PNG\', \'WEBP\']\n        if hasattr(value, \'image\'):\n            if value.image.format not in allowed_formats:\n                raise serializers.ValidationError(\n                    f"Image format must be one of: {\', \'.join(allowed_formats)}"\n                )\n        \n        return value\n\n\nclass AttributeValueSerializer(serializers.ModelSerializer):\n    """Serializer for attribute values"""\n    \n    attribute_name = serializers.CharField(source=\'attribute.name\', read_only=True)\n    \n    class Meta:\n        model = AttributeValue\n        fields = [\'id\', \'attribute\', \'attribute_name\', \'value\']\n\n\nclass ProductVariantSerializer(serializers.ModelSerializer):\n    """Serializer for product variants with attributes"""\n    \n    attributes = AttributeValueSerializer(many=True, read_only=True)\n    is_in_stock = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = ProductVariant\n        fields = [\'id\', \'sku\', \'price\', \'stock_quantity\', \'attributes\', \n                 \'is_in_stock\', \'weight\', \'dimensions\']\n        \n    def get_is_in_stock(self, obj):\n        """Check if variant is in stock"""\n        return obj.stock_quantity > 0\n\n\nclass ReviewSerializer(serializers.ModelSerializer):\n    """Serializer for product reviews"""\n    \n    user = serializers.StringRelatedField(read_only=True)\n    user_id = serializers.IntegerField(write_only=True)\n    is_verified_purchase = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Review\n        fields = [\'id\', \'user\', \'user_id\', \'rating\', \'title\', \'comment\', \n                 \'is_verified_purchase\', \'created_at\', \'updated_at\']\n        read_only_fields = [\'created_at\', \'updated_at\']\n        \n    def get_is_verified_purchase(self, obj):\n        """Check if reviewer has purchased the product"""\n        return OrderItem.objects.filter(\n            order__user=obj.user,\n            product=obj.product,\n            order__status=\'delivered\'\n        ).exists()\n    \n    def validate_rating(self, value):\n        """Validate rating is between 1 and 5"""' additional_kwargs={} response_metadata={'id': 'msg_0164xLL4LtgSdkwDoa3EGqjb', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--513c31a0-0a35-4fc5-a955-f5ef6178846d-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}