content='import logging\nimport stripe\nfrom decimal import Decimal\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom django.utils.decorators import method_decorator\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nfrom apps.orders.models import Order\nfrom apps.payments.models import Payment, PaymentMethod\nfrom apps.payments.serializers import PaymentSerializer, PaymentMethodSerializer\nfrom apps.notifications.utils import send_notification\n\nlogger = logging.getLogger(__name__)\nstripe.api_key = settings.STRIPE_SECRET_KEY\n\n\nclass PaymentMethodListCreateView(APIView):\n    """\n    List user\'s payment methods and create new ones\n    """\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        """Get all payment methods for the authenticated user"""\n        try:\n            payment_methods = PaymentMethod.objects.filter(\n                user=request.user,\n                is_active=True\n            )\n            serializer = PaymentMethodSerializer(payment_methods, many=True)\n            return Response(serializer.data)\n        except Exception as e:\n            logger.error(f"Error retrieving payment methods for user {request.user.id}: {str(e)}")\n            return Response(\n                {\'error\': \'Failed to retrieve payment methods\'},\n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n    def post(self, request):\n        """Create a new payment method"""\n        try:\n            # Get or create Stripe customer\n            customer = self._get_or_create_stripe_customer(request.user)\n            \n            # Attach payment method to customer\n            payment_method_id = request.data.get(\'payment_method_id\')\n            if not payment_method_id:\n                return Response(\n                    {\'error\': \'payment_method_id is required\'},\n                    status=status.HTTP_400_BAD_REQUEST\n                )\n\n            stripe_pm = stripe.PaymentMethod.attach(\n                payment_method_id,\n                customer=customer.id,\n            )\n\n            # Create local payment method record\n            payment_method = PaymentMethod.objects.create(\n                user=request.user,\n                stripe_payment_method_id=stripe_pm.id,\n                type=stripe_pm.type,\n                last_four=stripe_pm.card.last4 if stripe_pm.type == \'card\' else None,\n                brand=stripe_pm.card.brand if stripe_pm.type == \'card\' else None,\n                exp_month=stripe_pm.card.exp_month if stripe_pm.type == \'card\' else None,\n                exp_year=stripe_pm.card.exp_year if stripe_pm.type == \'card\' else None,\n                is_default=request.data.get(\'is_default\', False)\n            )\n\n            # If this is set as default, update other payment methods\n            if payment_method.is_default:\n                PaymentMethod.objects.filter(\n                    user=request.user,\n                    is_active=True\n                ).exclude(id=payment_method.id).update(is_default=False)\n\n            serializer = PaymentMethodSerializer(payment_method)\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n        except stripe.error.StripeError as e:\n            logger.error(f"Stripe error creating payment method: {str(e)}")\n            return Response(\n                {\'error\': \'Payment method creation failed\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        except Exception as e:\n            logger.error(f"Error creating payment method: {str(e)}")\n            return Response(\n                {\'error\': \'Failed to create payment method\'},\n                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n            )\n\n    def _get_or_create_stripe_customer(self, user):\n        """Get or create a Stripe customer for the user"""\n        if hasattr(' additional_kwargs={} response_metadata={'id': 'msg_01Sx76b9R3JH6D6Y1K8jKN1n', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 403, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--26dcefbf-723a-463c-8039-54eaf12afc1f-0' usage_metadata={'input_tokens': 403, 'output_tokens': 1024, 'total_tokens': 1427, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}