content='import stripe\nimport logging\nfrom decimal import Decimal\nfrom typing import Dict, Optional, Any, List\nfrom django.conf import settings\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\nfrom rest_framework import status\nfrom rest_framework.response import Response\n\nlogger = logging.getLogger(__name__)\n\n# Initialize Stripe with secret key\nstripe.api_key = settings.STRIPE_SECRET_KEY\n\n\nclass StripePaymentError(Exception):\n    """Custom exception for Stripe payment errors"""\n    pass\n\n\nclass StripeService:\n    """\n    Stripe payment integration service for handling payments,\n    refunds, and subscription management.\n    """\n\n    def __init__(self):\n        """Initialize Stripe service with API key"""\n        if not settings.STRIPE_SECRET_KEY:\n            raise ValueError("Stripe secret key is not configured")\n        \n        stripe.api_key = settings.STRIPE_SECRET_KEY\n        self.webhook_secret = getattr(settings, \'STRIPE_WEBHOOK_SECRET\', None)\n\n    def create_payment_intent(\n        self,\n        amount: Decimal,\n        currency: str = \'usd\',\n        customer_id: Optional[str] = None,\n        metadata: Optional[Dict[str, str]] = None,\n        description: Optional[str] = None,\n        automatic_payment_methods: bool = True\n    ) -> Dict[str, Any]:\n        """\n        Create a payment intent for processing payments\n        \n        Args:\n            amount: Payment amount in the smallest currency unit\n            currency: Currency code (default: \'usd\')\n            customer_id: Stripe customer ID if available\n            metadata: Additional metadata for the payment\n            description: Payment description\n            automatic_payment_methods: Enable automatic payment methods\n            \n        Returns:\n            Dict containing payment intent details\n            \n        Raises:\n            StripePaymentError: If payment intent creation fails\n        """\n        try:\n            # Convert amount to cents\n            amount_cents = int(amount * 100)\n            \n            payment_intent_data = {\n                \'amount\': amount_cents,\n                \'currency\': currency.lower(),\n                \'description\': description or \'E-commerce payment\',\n                \'metadata\': metadata or {},\n            }\n            \n            if customer_id:\n                payment_intent_data[\'customer\'] = customer_id\n                \n            if automatic_payment_methods:\n                payment_intent_data[\'automatic_payment_methods\'] = {\n                    \'enabled\': True\n                }\n            \n            payment_intent = stripe.PaymentIntent.create(**payment_intent_data)\n            \n            logger.info(f"Payment intent created: {payment_intent.id}")\n            \n            return {\n                \'id\': payment_intent.id,\n                \'client_secret\': payment_intent.client_secret,\n                \'status\': payment_intent.status,\n                \'amount\': payment_intent.amount,\n                \'currency\': payment_intent.currency,\n                \'metadata\': payment_intent.metadata,\n            }\n            \n        except stripe.error.StripeError as e:\n            logger.error(f"Stripe error creating payment intent: {str(e)}")\n            raise StripePaymentError(f"Failed to create payment intent: {str(e)}")\n        except Exception as e:\n            logger.error(f"Unexpected error creating payment intent: {str(e)}")\n            raise StripePaymentError(f"Unexpected error: {str(e)}")\n\n    def retrieve_payment_intent(self, payment_intent_id: str) -> Dict[str, Any]:\n        """\n        Retrieve payment intent details\n        \n        Args:\n            payment_intent_id: Stripe payment intent ID\n            \n        Returns:\n            Dict containing payment intent details\n            \n        Raises:\n            StripePaymentError: If retrieval fails\n        """\n        try:\n            payment_intent = stripe.PaymentIntent.retrieve(payment_intent_id)\n            \n            return {\n                \'id\': payment_intent.id,\n                \'status\': payment_intent.status,\n                \'amount\': payment_intent.amount,\n                \'currency\': payment_intent.currency,\n                \'metadata\': payment_intent.metadata,\n                \'charges\': payment_intent.charges.data if payment_intent.charges else' additional_kwargs={} response_metadata={'id': 'msg_013qW7ZiJSbVeP6aNGGTytj5', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--df5208d7-d8f7-402b-af85-c6f47fbe0cb4-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}