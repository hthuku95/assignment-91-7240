content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom django.db import transaction\nfrom decimal import Decimal\nfrom .models import Order, OrderItem\nfrom ..products.models import Product\nfrom ..products.serializers import ProductSerializer\n\nUser = get_user_model()\n\n\nclass OrderItemSerializer(serializers.ModelSerializer):\n    """Serializer for order items with product details."""\n    \n    product = ProductSerializer(read_only=True)\n    product_id = serializers.IntegerField(write_only=True)\n    subtotal = serializers.DecimalField(max_digits=10, decimal_places=2, read_only=True)\n    \n    class Meta:\n        model = OrderItem\n        fields = [\n            \'id\', \'product\', \'product_id\', \'quantity\', \n            \'price\', \'subtotal\', \'created_at\'\n        ]\n        read_only_fields = [\'id\', \'price\', \'created_at\']\n    \n    def validate_product_id(self, value):\n        """Validate that the product exists and is available."""\n        try:\n            product = Product.objects.get(id=value)\n            if not product.is_available:\n                raise serializers.ValidationError("Product is not available for purchase.")\n            return value\n        except Product.DoesNotExist:\n            raise serializers.ValidationError("Product does not exist.")\n    \n    def validate_quantity(self, value):\n        """Validate quantity is positive."""\n        if value <= 0:\n            raise serializers.ValidationError("Quantity must be greater than 0.")\n        return value\n    \n    def validate(self, attrs):\n        """Validate stock availability."""\n        product_id = attrs.get(\'product_id\')\n        quantity = attrs.get(\'quantity\')\n        \n        if product_id and quantity:\n            try:\n                product = Product.objects.get(id=product_id)\n                if product.stock < quantity:\n                    raise serializers.ValidationError({\n                        \'quantity\': f\'Only {product.stock} items available in stock.\'\n                    })\n            except Product.DoesNotExist:\n                pass  # Will be caught by product_id validation\n        \n        return attrs\n\n\nclass OrderCreateSerializer(serializers.ModelSerializer):\n    """Serializer for creating orders."""\n    \n    items = OrderItemSerializer(many=True, write_only=True)\n    shipping_address = serializers.CharField(max_length=500)\n    billing_address = serializers.CharField(max_length=500, required=False)\n    \n    class Meta:\n        model = Order\n        fields = [\n            \'shipping_address\', \'billing_address\', \'items\'\n        ]\n    \n    def validate_items(self, value):\n        """Validate that items list is not empty."""\n        if not value:\n            raise serializers.ValidationError("Order must contain at least one item.")\n        return value\n    \n    def validate(self, attrs):\n        """Set billing address to shipping address if not provided."""\n        if not attrs.get(\'billing_address\'):\n            attrs[\'billing_address\'] = attrs[\'shipping_address\']\n        return attrs\n    \n    @transaction.atomic\n    def create(self, validated_data):\n        """Create order with items and calculate totals."""\n        items_data = validated_data.pop(\'items\')\n        user = self.context[\'request\'].user\n        \n        # Create order\n        order = Order.objects.create(\n            user=user,\n            status=\'pending\',\n            **validated_data\n        )\n        \n        total_amount = Decimal(\'0.00\')\n        \n        # Create order items\n        for item_data in items_data:\n            product = Product.objects.select_for_update().get(\n                id=item_data[\'product_id\']\n            )\n            \n            # Check stock availability again (race condition protection)\n            if product.stock < item_data[\'quantity\']:\n                raise serializers.ValidationError({\n                    \'items\': f\'Insufficient stock for {product.name}. Only {product.stock} available.\'\n                })\n            \n            # Create order item\n            order_item = OrderItem.objects.create(\n                order=order,\n                product=product,\n                quantity=item_data[\'' additional_kwargs={} response_metadata={'id': 'msg_01VBkkUhqeTxRrFUQtaeg6Zv', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 405, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--b77a0a01-b0a5-4c9d-984f-92fcca06d125-0' usage_metadata={'input_tokens': 405, 'output_tokens': 1024, 'total_tokens': 1429, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}