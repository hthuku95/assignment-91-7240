content='from rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import AllowAny, IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom rest_framework_simplejwt.views import TokenObtainPairView\nfrom rest_framework_simplejwt.exceptions import TokenError, InvalidToken\nfrom django.contrib.auth import authenticate\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\nfrom django.core.validators import validate_email\nfrom django.db import IntegrityError\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.contrib.auth.password_validation import validate_password\nimport logging\n\nfrom .models import UserProfile\nfrom .serializers import UserSerializer, UserProfileSerializer, CustomTokenObtainPairSerializer\n\nlogger = logging.getLogger(__name__)\n\n\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    """\n    Custom JWT token obtain view that includes user profile data\n    """\n    serializer_class = CustomTokenObtainPairSerializer\n\n    def post(self, request, *args, **kwargs):\n        try:\n            response = super().post(request, *args, **kwargs)\n            if response.status_code == 200:\n                user = authenticate(\n                    username=request.data.get(\'username\'),\n                    password=request.data.get(\'password\')\n                )\n                if user:\n                    # Log successful login\n                    logger.info(f"User {user.username} logged in successfully")\n                    \n                    # Add user profile data to response\n                    try:\n                        profile = UserProfile.objects.get(user=user)\n                        response.data[\'user\'] = {\n                            \'id\': user.id,\n                            \'username\': user.username,\n                            \'email\': user.email,\n                            \'first_name\': user.first_name,\n                            \'last_name\': user.last_name,\n                            \'profile\': UserProfileSerializer(profile).data\n                        }\n                    except UserProfile.DoesNotExist:\n                        # Create profile if it doesn\'t exist\n                        profile = UserProfile.objects.create(user=user)\n                        response.data[\'user\'] = {\n                            \'id\': user.id,\n                            \'username\': user.username,\n                            \'email\': user.email,\n                            \'first_name\': user.first_name,\n                            \'last_name\': user.last_name,\n                            \'profile\': UserProfileSerializer(profile).data\n                        }\n            return response\n        except Exception as e:\n            logger.error(f"Login error: {str(e)}")\n            return Response(\n                {\'error\': \'Authentication failed\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n\n@api_view([\'POST\'])\n@permission_classes([AllowAny])\ndef register(request):\n    """\n    Register a new user account\n    """\n    try:\n        data = request.data\n        \n        # Validate required fields\n        required_fields = [\'username\', \'email\', \'password\', \'password_confirm\']\n        for field in required_fields:\n            if not data.get(field):\n                return Response(\n                    {\'error\': f\'{field} is required\'},\n                    status=status.HTTP_400_BAD_REQUEST\n                )\n        \n        # Validate email format\n        try:\n            validate_email(data[\'email\'])\n        except ValidationError:\n            return Response(\n                {\'error\': \'Invalid email format\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        # Check password confirmation\n        if data[\'password\'] != data[\'password_confirm\']:\n            return Response(\n                {\'error\': \'Passwords do not match\'},\n                status=status.HTTP_400_BAD_REQUEST\n            )\n        \n        # Validate password strength\n        try:\n            validate_password(data[\'password\'])\n        except ValidationError as e:\n            return Response(\n                {\'error\': list(e.messages)},\n                status=status.HTTP_400_BAD_REQUEST\n            ' additional_kwargs={} response_metadata={'id': 'msg_014AiFB1pP3G99eWSLTG7ekj', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 403, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--5f7f2d61-fe96-4edb-bf20-85ba80249062-0' usage_metadata={'input_tokens': 403, 'output_tokens': 1024, 'total_tokens': 1427, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}