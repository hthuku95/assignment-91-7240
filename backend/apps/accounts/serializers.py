content='from rest_framework import serializers\nfrom django.contrib.auth import authenticate\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\nfrom .models import User\n\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user registration with password confirmation\n    """\n    password = serializers.CharField(\n        write_only=True,\n        min_length=8,\n        style={\'input_type\': \'password\'}\n    )\n    password_confirm = serializers.CharField(\n        write_only=True,\n        style={\'input_type\': \'password\'}\n    )\n\n    class Meta:\n        model = User\n        fields = (\n            \'id\', \'email\', \'first_name\', \'last_name\', \n            \'phone_number\', \'password\', \'password_confirm\'\n        )\n        extra_kwargs = {\n            \'password\': {\'write_only\': True},\n            \'id\': {\'read_only\': True}\n        }\n\n    def validate_email(self, value):\n        """\n        Validate email uniqueness\n        """\n        if User.objects.filter(email=value.lower()).exists():\n            raise serializers.ValidationError(\n                _("A user with this email already exists.")\n            )\n        return value.lower()\n\n    def validate(self, attrs):\n        """\n        Validate password confirmation and strength\n        """\n        password = attrs.get(\'password\')\n        password_confirm = attrs.pop(\'password_confirm\', None)\n\n        if password != password_confirm:\n            raise serializers.ValidationError({\n                \'password_confirm\': _("Password confirmation doesn\'t match.")\n            })\n\n        try:\n            validate_password(password)\n        except ValidationError as e:\n            raise serializers.ValidationError({\n                \'password\': list(e.messages)\n            })\n\n        return attrs\n\n    def create(self, validated_data):\n        """\n        Create user with encrypted password\n        """\n        validated_data.pop(\'password_confirm\', None)\n        user = User.objects.create_user(**validated_data)\n        return user\n\n\nclass UserLoginSerializer(serializers.Serializer):\n    """\n    Serializer for user authentication\n    """\n    email = serializers.EmailField()\n    password = serializers.CharField(\n        style={\'input_type\': \'password\'},\n        trim_whitespace=False\n    )\n\n    def validate(self, attrs):\n        """\n        Validate user credentials\n        """\n        email = attrs.get(\'email\', \'\').lower()\n        password = attrs.get(\'password\')\n\n        if not email or not password:\n            raise serializers.ValidationError(\n                _(\'Must include email and password.\')\n            )\n\n        user = authenticate(\n            request=self.context.get(\'request\'),\n            username=email,\n            password=password\n        )\n\n        if not user:\n            raise serializers.ValidationError(\n                _(\'Unable to authenticate with provided credentials.\')\n            )\n\n        if not user.is_active:\n            raise serializers.ValidationError(\n                _(\'User account is disabled.\')\n            )\n\n        attrs[\'user\'] = user\n        return attrs\n\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user profile information\n    """\n    full_name = serializers.CharField(source=\'get_full_name\', read_only=True)\n    orders_count = serializers.IntegerField(read_only=True)\n\n    class Meta:\n        model = User\n        fields = (\n            \'id\', \'email\', \'first_name\', \'last_name\', \'full_name\',\n            \'phone_number\', \'date_joined\', \'last_login\', \'is_active\',\n            \'orders_count\'\n        )\n        read_only_fields = (\'id\', \'email\', \'date_joined\', \'last_login\', \'is_active\')\n\n    def validate_phone_number(self, value):\n        """\n        Validate phone number format\n        """\n        if value and not value.replace(\'+\', \'\').replace(\'-\', \'\').replace(\' \', \'\').isdigit():\n            raise serializers.ValidationError(\n                _("Phone number must contain only digits, spaces,' additional_kwargs={} response_metadata={'id': 'msg_016a9vE2L2TQmtxyohjwHuG1', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--2987b97e-d757-4944-868c-f24741bbfe29-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}