content='from django.contrib.auth.models import AbstractUser\nfrom django.db import models\nfrom django.core.validators import RegexValidator\nfrom django.utils.translation import gettext_lazy as _\nfrom django.core.exceptions import ValidationError\nimport uuid\n\n\nclass User(AbstractUser):\n    """\n    Custom User model extending Django\'s AbstractUser with additional fields\n    for e-commerce platform functionality.\n    """\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    email = models.EmailField(_(\'email address\'), unique=True)\n    phone_number = models.CharField(\n        max_length=20,\n        blank=True,\n        null=True,\n        validators=[\n            RegexValidator(\n                regex=r\'^\\+?1?\\d{9,15}$\',\n                message=_(\'Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.\')\n            )\n        ]\n    )\n    date_of_birth = models.DateField(blank=True, null=True)\n    is_verified = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    # Override username requirement\n    USERNAME_FIELD = \'email\'\n    REQUIRED_FIELDS = [\'username\', \'first_name\', \'last_name\']\n\n    class Meta:\n        db_table = \'auth_user\'\n        verbose_name = _(\'User\')\n        verbose_name_plural = _(\'Users\')\n\n    def __str__(self):\n        return self.email\n\n    def get_full_name(self):\n        """Return the first_name plus the last_name, with a space in between."""\n        full_name = f\'{self.first_name} {self.last_name}\'\n        return full_name.strip()\n\n    def get_short_name(self):\n        """Return the short name for the user."""\n        return self.first_name\n\n    def clean(self):\n        super().clean()\n        if self.email:\n            self.email = self.email.lower()\n\n\nclass UserProfile(models.Model):\n    """\n    Extended user profile model for storing additional user information\n    related to e-commerce functionality.\n    """\n    GENDER_CHOICES = [\n        (\'M\', _(\'Male\')),\n        (\'F\', _(\'Female\')),\n        (\'O\', _(\'Other\')),\n        (\'P\', _(\'Prefer not to say\')),\n    ]\n\n    user = models.OneToOneField(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\'profile\'\n    )\n    avatar = models.ImageField(\n        upload_to=\'avatars/\',\n        blank=True,\n        null=True,\n        help_text=_(\'User profile picture\')\n    )\n    bio = models.TextField(\n        max_length=500,\n        blank=True,\n        help_text=_(\'Brief description about the user\')\n    )\n    gender = models.CharField(\n        max_length=1,\n        choices=GENDER_CHOICES,\n        blank=True,\n        null=True\n    )\n    website = models.URLField(blank=True, null=True)\n    \n    # Notification preferences\n    email_notifications = models.BooleanField(\n        default=True,\n        help_text=_(\'Receive email notifications\')\n    )\n    sms_notifications = models.BooleanField(\n        default=False,\n        help_text=_(\'Receive SMS notifications\')\n    )\n    marketing_emails = models.BooleanField(\n        default=False,\n        help_text=_(\'Receive marketing emails\')\n    )\n    \n    # E-commerce specific fields\n    preferred_currency = models.CharField(\n        max_length=3,\n        default=\'USD\',\n        help_text=_(\'Preferred currency code (ISO 4217)\')\n    )\n    preferred_language = models.CharField(\n        max_length=10,\n        default=\'en\',\n        help_text=_(\'Preferred language code\')\n    )\n    \n    created_at = models.DateTimeField(auto_now_add=' additional_kwargs={} response_metadata={'id': 'msg_01MMb4qTgqXFU74adsCv2xha', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--bf6fe3f6-e818-415b-8df9-f36a90afbdd3-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}