content='# Backend Dependencies - Real API Test E-commerce Platform\n\n## Overview\n\nThis document outlines the Python dependencies required for the Django REST API backend of the Real API Test E-commerce Platform. The `requirements.txt` file contains all necessary packages to run the backend services including API endpoints, user authentication, payment processing, real-time notifications, and database operations.\n\n## Dependencies Structure\n\nThe backend dependencies are organized into several categories to support the comprehensive e-commerce functionality:\n\n### Core Framework\n- **Django**: Main web framework for building the backend application\n- **djangorestframework**: Powerful toolkit for building Web APIs in Django\n- **django-cors-headers**: Handles Cross-Origin Resource Sharing (CORS) for frontend integration\n\n### Database & ORM\n- **psycopg2-binary**: PostgreSQL adapter for Python (production database)\n- **django-extensions**: Additional Django management commands and utilities\n\n### Authentication & Security\n- **djangorestframework-simplejwt**: JSON Web Token authentication for Django REST Framework\n- **django-oauth-toolkit**: OAuth2 provider for advanced authentication scenarios\n- **cryptography**: Cryptographic recipes and primitives\n\n### Payment Processing\n- **stripe**: Official Stripe Python library for payment processing\n- **django-payments**: Payment processing framework for Django\n\n### Real-time Features\n- **channels**: Django extension for WebSocket support and real-time features\n- **channels-redis**: Redis channel layer for Django Channels\n- **redis**: Python Redis client\n\n### API Documentation\n- **drf-spectacular**: OpenAPI 3.0 schema generation for Django REST Framework\n- **swagger-ui**: Interactive API documentation interface\n\n### Testing & Development\n- **pytest-django**: pytest plugin for Django applications\n- **factory-boy**: Test fixtures replacement for Python\n- **coverage**: Code coverage measurement\n- **django-debug-toolbar**: Development debugging panel\n\n### Utilities & Helpers\n- **python-decouple**: Separate configuration from code\n- **pillow**: Python Imaging Library for image processing\n- **celery**: Distributed task queue for background processing\n- **django-storages**: Custom storage backends for Django\n\n## Installation\n\n### Prerequisites\n- Python 3.8 or higher\n- pip package manager\n- Virtual environment (recommended)\n\n### Setup Instructions\n\n1. **Create and activate virtual environment:**\n```bash\n# Create virtual environment\npython -m venv venv\n\n# Activate on Linux/Mac\nsource venv/bin/activate\n\n# Activate on Windows\nvenv\\Scripts\\activate\n```\n\n2. **Install dependencies:**\n```bash\n# Install all dependencies\npip install -r requirements.txt\n\n# Verify installation\npip list\n```\n\n3. **Environment-specific installation:**\n```bash\n# For development with additional tools\npip install -r requirements.txt\npip install -r requirements-dev.txt  # if exists\n\n# For production (minimal dependencies)\npip install -r requirements.txt --no-dev\n```\n\n## Dependency Categories Explained\n\n### Essential Backend Components\n\n**Django & REST Framework**\n- Provides the core web framework and API capabilities\n- Handles HTTP requests, routing, and response formatting\n- Includes admin interface and ORM functionality\n\n**Database Integration**\n- PostgreSQL support for production-grade data storage\n- Migration system for database schema management\n- Query optimization and connection pooling\n\n**Authentication System**\n- JWT token-based authentication for stateless API access\n- OAuth2 support for third-party integrations\n- Secure password hashing and user management\n\n### E-commerce Specific Features\n\n**Payment Processing**\n- Stripe integration for secure payment handling\n- Support for multiple payment methods\n- Webhook handling for payment confirmations\n\n**Real-time Notifications**\n- WebSocket support for live updates\n- Redis-backed message passing\n- Scalable real-time communication\n\n**Image Processing**\n- Product image upload and manipulation\n- Thumbnail generation and optimization\n- Multiple image format support\n\n### Development & Testing\n\n**Testing Framework**\n- Comprehensive test suite capabilities\n- Factory pattern for test data generation\n- Code coverage reporting and analysis\n\n**API Documentation**\n- Automatic OpenAPI schema generation\n- Interactive API explorer interface\n- Comprehensive endpoint documentation\n\n## Version Management\n\n### Pinned Dependencies\nThe requirements.txt file uses specific version pinning to ensure consistent deployments:\n```\nDjango==4.2.7\ndjangorestframework==3.14.0\nstripe==7.8.0\n```\n\n### Version Compatibility\n- All dependencies are tested for compatibility with Python 3.8+\n- Django LTS version for long-term support and stability\n- Latest stable versions of' additional_kwargs={} response_metadata={'id': 'msg_019Sk88cyb9e976RseqjwhNt', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 368, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--c925404f-422b-4cc9-8d8e-411712d92632-0' usage_metadata={'input_tokens': 368, 'output_tokens': 1024, 'total_tokens': 1392, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}